// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"github.com/almaznur91/splitty/internal/bot"
	"github.com/almaznur91/splitty/internal/events"
	"github.com/almaznur91/splitty/internal/repository"
	"github.com/almaznur91/splitty/internal/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func initApp(ctx context.Context, cfg *config) (*events.TelegramListener, func(), error) {
	botConfig := initBotConfig(cfg)
	botAPI, err := initTelegramApi(cfg, botConfig)
	if err != nil {
		return nil, nil, err
	}
	database, cleanup, err := initMongoConnection(ctx, cfg)
	if err != nil {
		return nil, nil, err
	}
	mongoChatStateRepository := repository.NewChatStateRepository(database)
	chatStateService := service.NewChatStateService(mongoChatStateRepository)
	mongoButtonRepository := repository.NewButtonRepository(database)
	buttonService := service.NewButtonService(mongoButtonRepository)
	startScreen := bot.NewStartScreen(chatStateService, buttonService, botConfig)
	roomCreating := bot.NewRoomCreating(chatStateService, buttonService, botConfig)
	mongoRoomRepository := repository.NewRoomRepository(database)
	roomService := service.NewRoomService(mongoRoomRepository)
	roomSetName := bot.NewRoomSetName(chatStateService, buttonService, roomService, botConfig)
	joinRoom := bot.NewJoinRoom(chatStateService, buttonService, roomService, botConfig)
	operationService := service.NewOperationService(mongoRoomRepository)
	statisticService := service.NewStatisticService(mongoRoomRepository, operationService)
	allRoomInline := bot.NewAllRoomInline(chatStateService, buttonService, roomService, statisticService, botConfig)
	wantDonorOperation := bot.NewWantDonorOperation(chatStateService, buttonService, operationService, roomService, botConfig)
	addDonorOperation := bot.NewAddDonorOperation(chatStateService, buttonService, operationService, roomService, botConfig)
	donorOperation := bot.NewDonorOperation(buttonService, operationService, roomService, botConfig)
	deleteDonorOperation := bot.NewDeleteDonorOperation(chatStateService, buttonService, operationService, botConfig)
	viewRoom := bot.NewViewRoom(buttonService, roomService, chatStateService, botConfig)
	viewAllOperations := bot.NewViewAllOperations(chatStateService, buttonService, operationService, botConfig)
	allRoom := bot.NewAllRoom(chatStateService, buttonService, roomService, botConfig)
	chooseRecepientOperation := bot.NewChooseRecepientOperation(chatStateService, buttonService, operationService, roomService, botConfig)
	wantRecepientOperation := bot.NewWantRecepientOperation(chatStateService, buttonService, operationService, roomService, botConfig)
	mongoUserRepository := repository.NewUserRepository(database)
	userService := service.NewUserService(mongoUserRepository)
	addRecepientOperation := bot.NewAddRecepientOperation(chatStateService, buttonService, operationService, userService, roomService, botConfig)
	viewUserDebts := bot.NewViewUserDebts(chatStateService, buttonService, operationService, botConfig)
	viewAllDebts := bot.NewViewAllDebts(chatStateService, buttonService, operationService, botConfig)
	viewSetting := bot.NewViewSetting(buttonService, roomService, chatStateService, botConfig)
	archiveRoom := bot.NewArchiveRoom(buttonService, roomService, chatStateService, botConfig, viewSetting)
	archivedRooms := bot.NewArchivedRooms(chatStateService, buttonService, roomService, botConfig)
	statistic := bot.NewStatistic(buttonService, roomService, chatStateService, statisticService, botConfig)
	viewAllDebtOperations := bot.NewViewAllDebtOperations(chatStateService, buttonService, operationService, botConfig)
	v := ProvideBotList(startScreen, roomCreating, roomSetName, joinRoom, allRoomInline, wantDonorOperation, addDonorOperation, donorOperation, deleteDonorOperation, viewRoom, viewAllOperations, allRoom, chooseRecepientOperation, wantRecepientOperation, addRecepientOperation, viewUserDebts, viewAllDebts, viewSetting, archiveRoom, archivedRooms, statistic, viewAllDebtOperations)
	telegramListener, err := initTelegramConfig(botAPI, v, buttonService, userService, chatStateService)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return telegramListener, func() {
		cleanup()
	}, nil
}

// wire.go:

var bots = wire.NewSet(bot.NewStartScreen, bot.NewRoomCreating, bot.NewRoomSetName, bot.NewJoinRoom, bot.NewAllRoomInline, bot.NewWantDonorOperation, bot.NewAddDonorOperation, bot.NewDonorOperation, bot.NewDeleteDonorOperation, bot.NewViewRoom, bot.NewViewAllOperations, bot.NewAllRoom, bot.NewChooseRecepientOperation, bot.NewWantRecepientOperation, bot.NewAddRecepientOperation, bot.NewViewUserDebts, bot.NewViewAllDebts, bot.NewViewSetting, bot.NewArchiveRoom, bot.NewArchivedRooms, bot.NewStatistic, bot.NewViewAllDebtOperations)

func ProvideBotList(
	b2 *bot.StartScreen,
	b3 *bot.RoomCreating,
	b4 *bot.RoomSetName,
	b5 *bot.JoinRoom,
	b6 *bot.AllRoomInline,
	b8 *bot.WantDonorOperation,
	b9 *bot.AddDonorOperation,
	b10 *bot.DonorOperation,
	b11 *bot.DeleteDonorOperation,
	b12 *bot.ViewRoom,
	b13 *bot.ViewAllOperations,
	b14 *bot.AllRoom,
	b15 *bot.ChooseRecepientOperation,
	b16 *bot.WantRecepientOperation,
	b17 *bot.AddRecepientOperation,
	b18 *bot.ViewUserDebts,
	b19 *bot.ViewAllDebts,
	b20 *bot.ViewSetting,
	b21 *bot.ArchiveRoom,
	b22 *bot.ArchivedRooms,
	b23 *bot.Statistic,
	b24 *bot.ViewAllDebtOperations,

) []bot.Interface {
	return []bot.Interface{b2, b3, b4, b5, b6, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20,
		b21, b22, b23, b24}
}
